generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(cuid())
  email             String            @unique
  password          String
  fullName          String
  role              Role
  salt              String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  address           String?
  birthDate         DateTime?
  emergencyContact  String?
  notes             String?
  phone             String?
  attendance        Attendance[]      @relation("StudentAttendance")
  enrollments       ClassEnrollment[] @relation("StudentEnrollments")
  consultantClasses Class[]           @relation("ConsultantClasses")
  payments          Payment[]         @relation("StudentPayments")

  @@map("users")
}

model Class {
  id           String            @id @default(cuid())
  type         ClassType
  consultantId String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  description  String?
  name         String
  dayOfWeek    Int
  endTime      DateTime
  isActive     Boolean           @default(true)
  level        CEFRLevel
  maxStudents  Int               @default(10)
  startTime    DateTime
  attendance   Attendance[]
  enrollments  ClassEnrollment[]
  lessons      ClassLesson[]
  consultant   User?             @relation("ConsultantClasses", fields: [consultantId], references: [id])
  payments     Payment[]         @relation("ClassPayments")

  @@map("classes")
}

model ClassEnrollment {
  id         String   @id @default(cuid())
  classId    String
  studentId  String
  enrolledAt DateTime @default(now())
  isActive   Boolean  @default(true)
  class      Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  student    User     @relation("StudentEnrollments", fields: [studentId], references: [id])

  @@unique([classId, studentId])
  @@map("class_enrollments")
}

model Content {
  id              String        @id @default(cuid())
  title           String
  description     String?
  presentationUrl String?
  homeworkUrl     String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  isActive        Boolean       @default(true)
  module          CEFRLevel
  order           Int
  studentsPdfUrl  String?
  classLessons    ClassLesson[]

  @@unique([module, order])
  @@map("contents")
}

model ClassLesson {
  id           String       @id @default(cuid())
  classId      String
  contentId    String
  lessonDate   DateTime
  notes        String?
  wasCompleted Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  attendance   Attendance[]
  class        Class        @relation(fields: [classId], references: [id], onDelete: Cascade)
  content      Content      @relation(fields: [contentId], references: [id])

  @@map("class_lessons")
}

model Attendance {
  id        String           @id @default(cuid())
  studentId String
  classId   String
  lessonId  String
  status    AttendanceStatus
  notes     String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  class     Class            @relation(fields: [classId], references: [id])
  lesson    ClassLesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  student   User             @relation("StudentAttendance", fields: [studentId], references: [id])

  @@unique([studentId, lessonId])
  @@map("attendance")
}

model Payment {
  id             String        @id @default(cuid())
  studentId      String
  classId        String?
  amount         Decimal       @db.Decimal(10, 2)
  description    String
  status         PaymentStatus @default(PENDING)
  dueDate        DateTime
  paidDate       DateTime?
  referenceMonth Int
  referenceYear  Int
  notes          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  class          Class?        @relation("ClassPayments", fields: [classId], references: [id])
  student        User          @relation("StudentPayments", fields: [studentId], references: [id])

  @@map("payments")
}

enum Role {
  ADMIN
  CONSULTANT
  STUDENT
}

enum ClassType {
  CORPORATE
  PRIVATE
}

enum CEFRLevel {
  A1
  A2
  B1
  B2
  C1
  C2
  CONVERSATION_A1
  CONVERSATION_A2
  CONVERSATION_B1
  CONVERSATION_B2
  CONVERSATION_C1
  CONVERSATION_C2
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}
